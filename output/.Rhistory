# the procedure would be as the same as the SIFT feature part but change the feature file int othe HOG features
library(xgboost)
df <- read.csv('../output/hog_extraction1.csv', header=FALSE)
labels <- read.csv("../data/label_train.csv")
df$label <- as.factor(labels$label)
df$V1 <- NULL
# Relabel factors for XGBoost specific num_classes requirement
levels(df$label)[levels(df$label)=="1"] <- "0"
levels(df$label)[levels(df$label)=="2"] <- "1"
levels(df$label)[levels(df$label)=="3"] <- "2"
# XGBoost Algorithm
set.seed(031918)
test.i <- sample(1:nrow(df), .3*nrow(df), replace=FALSE)
test.data <- df[test.i,]
train.data <- df[-test.i,]
target.i <- which(colnames(df) == 'label')
train.data <- df[-test.i, -target.i]
train.target <- df[-test.i, target.i]
t1=Sys.time()
model2 <- xgb.cv(data = as.matrix(train.data), label = train.target, nfold=10,
nrounds = 2, objective = "multi:softmax", num_class = 4)
t2=Sys.time()
t2-t1
model2$time = t2-t1
save(model2,file="../output/XGBoost_HOG.result.RData")
load("../output/XGBoost_HOG.result.RData")
XGBoost_HOG.test.accuracy <- 1-model2$evaluation_log$test_merror_mean[2]
XGBoost_HOG.test.accuracy
model2$time
load("../output/XGBoost_HOG.result.RData")
XGBoost_HOG.test.accuracy <- 1-model2$evaluation_log$test_merror_mean[2]
XGBoost_HOG.test.accuracy
model2$time
datasplit_rgb <- data_split("rgb_feature")
train_rgb <- datasplit_rgb$df_train
test_rgb <- datasplit_rgb$df_test
load("../output/GBM_rgb.RData")
GBM_rgb.time <- GBM_rgb$time
GBM_rgb.time
GBM.test.result_rgb <- test_gbm(GBM_rgb, test_rgb)
GBM.test.accuracy_rgb <- mean(GBM.test.result_rgb == test_rgb[,1])
GBM.test.accuracy_rgb
load("../output/svm_rgb.result.RData")
svm_rgb.result.time <- svm_rgb.result$time
svm_rgb.result.time
svm_rgb.test.result <- test(svm_rgb.result, test_rgb)
svm_rgb.test.accuracy <- 1 - mean(svm_rgb.test.result != test_rgb[,1])
svm_rgb.test.accuracy
load("../output/rf_rgb.result.RData")
rf_rgb.result.time <- rf_rgb.result$time
rf_rgb.result.time
rf_rgb.test.result <- test(rf_rgb.result, test_rgb)
rf_rgb.test.accuracy <- 1 - mean(rf_rgb.test.result != test_rgb[,1])
rf_rgb.test.accuracy
load("../output/lr_rgb.result.RData")
lr_rgb.result.time <- lr_rgb.result$time
lr_rgb.result.time
lr_rgb.test.result <- test(lr_rgb.result,test_rgb)
lr_rgb.test.accuracy <- 1 - mean(lr_rgb.test.result !=test_rgb[,1])
lr_rgb.test.accuracy
library(xgboost)
df <- read.csv("../output/rgb_feature.csv", header=FALSE)
labels <- read.csv("../data/label_train.csv")
df$label <- as.factor(labels$label)
df$V1 <- NULL
# Relabel factors for XGBoost specific num_classes requirement
levels(df$label)[levels(df$label)=="1"] <- "0"
levels(df$label)[levels(df$label)=="2"] <- "1"
levels(df$label)[levels(df$label)=="3"] <- "2"
#XGBoost Algorithm
set.seed(031918)
test.i <- sample(1:nrow(df), .3*nrow(df), replace=FALSE)
test.data <- df[test.i,]
train.data <- df[-test.i,]
target.i <- which(colnames(df) == 'label')
train.data <- df[-test.i, -target.i]
train.target <- df[-test.i, target.i]
t1=Sys.time()
model3 <- xgb.cv(data = as.matrix(train.data), label = train.target, nfold=10,
nrounds = 2, objective = "multi:softmax", num_class = 4)
t2=Sys.time()
t2-t1
model2$time = t2-t1
save(model3,file="../output/XGBoost_RGB.result.RData")
load("../output/XGBoost_RGB.result.RData")
XGBoost_RGB.test.accuracy <- 1-model3$evaluation_log$test_merror_mean[2]
XGBoost_RGB.test.accuracy
model3$time
library(xgboost)
df <- read.csv("../output/rgb_feature.csv", header=FALSE)
labels <- read.csv("../data/label_train.csv")
df$label <- as.factor(labels$label)
df$V1 <- NULL
# Relabel factors for XGBoost specific num_classes requirement
levels(df$label)[levels(df$label)=="1"] <- "0"
levels(df$label)[levels(df$label)=="2"] <- "1"
levels(df$label)[levels(df$label)=="3"] <- "2"
#XGBoost Algorithm
set.seed(031918)
test.i <- sample(1:nrow(df), .3*nrow(df), replace=FALSE)
test.data <- df[test.i,]
train.data <- df[-test.i,]
target.i <- which(colnames(df) == 'label')
train.data <- df[-test.i, -target.i]
train.target <- df[-test.i, target.i]
t1=Sys.time()
model3 <- xgb.cv(data = as.matrix(train.data), label = train.target, nfold=10,
nrounds = 2, objective = "multi:softmax", num_class = 4)
t2=Sys.time()
t2-t1
model3$time = t2-t1
save(model3,file="../output/XGBoost_RGB.result.RData")
load("../output/XGBoost_RGB.result.RData")
XGBoost_RGB.test.accuracy <- 1-model3$evaluation_log$test_merror_mean[2]
XGBoost_RGB.test.accuracy
model3$time
load("../output/rf_SIFT.result.RData")
rf_SIFT.result$time
rf_SIFT.result$time=28
rf_SIFT.result$time
load("../output/rf_SIFT.result.RData")
class(rf_SIFT.result$time)
View(rf_SIFT.result)
rf_SIFT.result[["time"]]
rf_SIFT.result[["time"]]
difftime(0,6843)
time(1)
Sys.time()
class(Sys.time())
rf_SIFT.result.time
load("../output/rf_SIFT.result.RData")
rf_SIFT.result.time
rf_SIFT.result$time
rf_SIFT.result$time<-c("Time difference of 114.0564 mins")
rf_SIFT.result$time
rf_SIFT.result.time <- rf_SIFT.result$time
rf_SIFT.result.time
load("../output/svm_SIFT.result.RData")
svm_SIFT.result.time <- svm_SIFT.result$time
svm_SIFT.result.time
svm_SIFT.test.result <- test(svm_SIFT.result, datasplit_sift$df_test)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
svm_SIFT.result.time <- svm_SIFT.result$time
svm_SIFT.result.time
svm_SIFT.test.result <- test(svm_SIFT.result, datasplit_sift$df_test)
load("../output/svm_SIFT.result.RData")
svm_SIFT.result.time <- svm_SIFT.result$time
svm_SIFT.result.time
svm_SIFT.test.result <- test(svm_SIFT.result, datasplit_sift$df_test)
datasplit_sift <- data_split("SIFT")
train_sift<- datasplit_sift$df_train
test_sift <- datasplit_sift$df_test
load("../output/svm_SIFT.result.RData")
svm_SIFT.result.time <- svm_SIFT.result$time
svm_SIFT.result.time
svm_SIFT.test.result <- test(svm_SIFT.result, datasplit_sift$df_test)
svm_SIFT.test.accuracy <- 1 - mean(svm_SIFT.test.result != datasplit_sift$df_test[,1])
svm_SIFT.test.accuracy
difftime
> d <- c('2013-12-05 18:43:00','2013-08-23 22:29:00')
> difftime(d[2],d[1])
Time difference of -103.8431 days
d <- c('2013-12-05 18:43:00','2013-08-23 22:29:00')
difftime(d[2],d[1])
Time difference of -103.8431 days
d <- c('2013-12-05 18:43:00','2013-08-23 22:29:00')
d <- c('2018-03-27 18:43:00','2018-03-27 22:29:00')
difftime(d[2],d[1])
difftime(d[2],d[1],secs)
difftime(d[2],d[1],units = "mins")
d <- c('2018-03-27 18:43:00','2018-03-27 20:05:00')
difftime(d[2],d[1],units = "mins")
d <- c('2018-03-27 18:43:00','2018-03-27 20:35:00')
difftime(d[2],d[1],units = "mins")
d <- c('2018-03-27 18:43:00','2018-03-27 20:37:03')
difftime(d[2],d[1],units = "mins")
difftime(d[2],d[1],units = "secs")
difftime(d[2],d[1],units = "mins")
rf_SIFT.result$time<-difftime(d[2],d[1],units = "mins")
rf_SIFT.result$time
save(rf_SIFT.result,file="../output/rf_SIFT.result.RData")
load("../output/rf_SIFT.result.RData")
rf_SIFT.result.time <- rf_SIFT.result$time
rf_SIFT.result.time
rf_SIFT.test.result <- test(rf_SIFT.result, datasplit_sift$df_test)
rf_SIFT.test.accuracy <- 1 - mean(rf_SIFT.test.result != datasplit_sift$df_test[,1])
rf_SIFT.test.accuracy
load("../output/rf_SIFT.result.RData")
rf_SIFT.result.time <- rf_SIFT.result$time
rf_SIFT.result.time
rf_SIFT.test.result <- test(rf_SIFT.result, datasplit_sift$df_test)
rf_SIFT.test.accuracy <- 1 - mean(rf_SIFT.test.result != datasplit_sift$df_test[,1])
rf_SIFT.test.accuracy
load("../output/rf_SIFT.result.RData")
load("../output/rf_SIFT.result.RData")
rf_SIFT.result.time <- rf_SIFT.result$time
rf_SIFT.result.time
rf_SIFT.test.result <- test(rf_SIFT.result, datasplit_sift$df_test)
rf_SIFT.test.accuracy <- 1 - mean(rf_SIFT.test.result != datasplit_sift$df_test[,1])
rf_SIFT.test.accuracy
labels <- read.csv("../data/label_train.csv")
View(labels)
SIFT <- read.csv("../data/SIFT_train.csv")
View(SIFT)
SIFT <- read.csv("../data/SIFT_train.csv",header = F)
labels
SIFT[,1]<-labels[,3]
colnames(SIFT[,1])
colnames(SIFT[,1]) <- Label
colnames(SIFT[,1]) <- "Label"
colnames(SIFT)
colnames(SIFT)[1]
colnames(SIFT)[1] <- "Label"
head(SIFT)
head(SIFT)
load("../output/baseline.result.RData")
View(datasplit_sift)
test_gbm(baseline.result,SIFT)
SIFT[,1]
baseline.result != SIFT[,1]
1 - mean(baseline.result != SIFT[,1])
SIFT[,1]
baseline.result
baseline.result <- test_gbm(baseline.result,SIFT)
baseline.result
baseline.result
baseline.result != SIFT[,1]
1 - mean(baseline.result != SIFT[,1])
baseline.result
1 - mean(baseline.result != SIFT[,1])
load("../output/baseline.result.RData")
baseline.time <- baseline.result$time
baseline.time
baseline.test.result <- test_gbm(baseline.result, datasplit_sift$df_test)
baseline.test.accuracy <- 1 - mean(baseline.test.result != datasplit_sift$df_test[,1])
baseline.test.accuracy
View(test_sift)
?createDataPartition
load("../output/XGBoost_HOG.result.RData")
XGBoost_HOG.test.accuracy <- 1-model2$evaluation_log$test_merror_mean[2]
XGBoost_HOG.test.accuracy
model2$time
# library(xgboost)
# df <- read.csv("../output/rgb_feature.csv", header=FALSE)
# labels <- read.csv("../data/label_train.csv")
# df$label <- as.factor(labels$label)
# df$V1 <- NULL
#
# # Relabel factors for XGBoost specific num_classes requirement
# levels(df$label)[levels(df$label)=="1"] <- "0"
# levels(df$label)[levels(df$label)=="2"] <- "1"
# levels(df$label)[levels(df$label)=="3"] <- "2"
#
# #XGBoost Algorithm
# set.seed(031918)
# test.i <- sample(1:nrow(df), .3*nrow(df), replace=FALSE)
# test.data <- df[test.i,]
# train.data <- df[-test.i,]
#
# target.i <- which(colnames(df) == 'label')
# train.data <- df[-test.i, -target.i]
# train.target <- df[-test.i, target.i]
#
# t1=Sys.time()
# model3 <- xgb.cv(data = as.matrix(train.data), label = train.target, nfold=10,
#                  nrounds = 2, objective = "multi:softmax", num_class = 4)
# t2=Sys.time()
# t2-t1
# model3$time = t2-t1
# save(model3,file="../output/XGBoost_RGB.result.RData")
load("../output/XGBoost_RGB.result.RData")
XGBoost_RGB.test.accuracy <- 1-model3$evaluation_log$test_merror_mean[2]
XGBoost_RGB.test.accuracy
model3$time
packages.used=c("caret","gbm","EBImage","e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "pbapply", "ggthemes","xgboost")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,repos = "http://cran.us.r-project.org")
}
library(caret)
library(gbm)
library(EBImage)
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
library(EBImage)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
datasplit_sift <- data_split("SIFT")
train_sift<- datasplit_sift$df_train
test_sift <- datasplit_sift$df_test
packages.used=c("caret","gbm","EBImage","e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "pbapply", "ggthemes","xgboost")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,repos = "http://cran.us.r-project.org")
}
library(caret)
library(gbm)
library(EBImage)
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
library(EBImage)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
packages.used=c("caret","gbm","EBImage","e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "pbapply", "ggthemes","xgboost")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,repos = "http://cran.us.r-project.org")
}
library(caret)
library(gbm)
library(EBImage)
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
library(EBImage)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
load("../output/baseline.result.RData")
baseline.time <- baseline.result$time
baseline.time
baseline.test.result <- test_gbm(baseline.result, datasplit_sift$df_test)
baseline.test.accuracy <- 1 - mean(baseline.test.result != datasplit_sift$df_test[,1])
baseline.test.accuracy
datasplit_sift <- data_split("SIFT")
train_sift<- datasplit_sift$df_train
test_sift <- datasplit_sift$df_test
load("../output/baseline.result.RData")
baseline.time <- baseline.result$time
baseline.time
baseline.test.result <- test_gbm(baseline.result, datasplit_sift$df_test)
baseline.test.accuracy <- 1 - mean(baseline.test.result != datasplit_sift$df_test[,1])
baseline.test.accuracy
load("../output/svm_SIFT.result.RData")
svm_SIFT.result.time <- svm_SIFT.result$time
svm_SIFT.result.time
svm_SIFT.test.result <- test(svm_SIFT.result, datasplit_sift$df_test)
svm_SIFT.test.accuracy <- 1 - mean(svm_SIFT.test.result != datasplit_sift$df_test[,1])
svm_SIFT.test.accuracy
load("../output/rf_SIFT.result.RData")
rf_SIFT.result.time <- rf_SIFT.result$time
rf_SIFT.result.time
rf_SIFT.test.result <- test(rf_SIFT.result, datasplit_sift$df_test)
rf_SIFT.test.accuracy <- 1 - mean(rf_SIFT.test.result != datasplit_sift$df_test[,1])
rf_SIFT.test.accuracy
load("../output/lr_SIFT.result.RData")
lr_SIFT.result.time <- lr_SIFT.result$time
lr_SIFT.result.time
lr_SIFT.test.result <- test(lr_SIFT.result, datasplit_sift$df_test)
lr_SIFT.test.accuracy <- 1 - mean(lr_SIFT.test.result != datasplit_sift$df_test[,1])
lr_SIFT.test.accuracy
load("../output/XGBoost_SIFT.result.RData")
XGBoost_SIFT.test.accuracy <- 1-model$evaluation_log$test_merror_mean[2]
XGBoost_SIFT.test.accuracy
model$time
datasplit_hog <- data_split("hog_extraction1")
train_hog <- datasplit_hog$df_train
test_hog <- datasplit_hog$df_test
packages.used=c("caret","gbm","EBImage","e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "pbapply", "ggthemes","xgboost")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,repos = "http://cran.us.r-project.org")
}
library(caret)
library(gbm)
library(EBImage)
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
library(EBImage)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/data_split.R")
?xgb.cv
library(xgboost)
?xgb.cv
setwd("~/Documents/GitHub/Spring2018-Project4-grp9")
MStrain <- read.csv("../data/MS_sample/data_train.csv")
MStest  <- read.csv("../data/MS_sample/data_test.csv")
Movietrain <- read.csv("../data/eachmovie_sample/data_train.csv")
Movietest  <- read.csv("../data/eachmovie_sample/data_test.csv")
setwd("~/Documents/GitHub/Spring2018-Project4-grp9/data")
MStrain <- read.csv("../data/MS_sample/data_train.csv")
MStest  <- read.csv("../data/MS_sample/data_test.csv")
Movietrain <- read.csv("../data/eachmovie_sample/data_train.csv")
Movietest  <- read.csv("../data/eachmovie_sample/data_test.csv")
### For data MS
MS_data <- function(tr_data,test_data){
user_num <- which(tr_data$V1 == "C")
user_id <- tr_data$V2[user_num]
Vroot_id <- unique(tr_data$V2[which(tr_data$V1 == "V")])
MS_mat <- matrix(0, nrow = length(user_id), ncol = length(Vroot_id))
rownames(MS_mat) <- as.character(user_id)
colnames(MS_mat) <- as.character(Vroot_id[order(Vroot_id)])
test_mat <- MS_mat
for(i in 1:(nrow(tr_data)-1)){
if(tr_data[i,2] == "C"){
userid <- tr_data[i,3]
while(tr_data[i+1,2] == "V"){
MS_mat[as.character(userid), as.character(tr_data[i+1,3])] = 1
if((i+1) != nrow(tr_data)){
i <- i+1
}
else break
}
}
}
for(i in 1:(nrow(test_data)-1)){
if(test_data[i,2] == "C"){
userid <- test_data[i,3]
while(test_data[i+1,2] == "V"){
test_mat[as.character(userid), as.character(test_data[i+1,3])] = 1
if((i+1) != nrow(test_data)){
i <- i+1
}
else break
}
}
}
return(list(train=MS_mat,test=test_mat))
}
all_data <- MS_data(MStrain,MStest)
MS_train <- all_data$train
MS_test  <- all_data$test
save(MS_train, file = "../output/data/MS_train.RData")
save(MS_test, file = "../output/data/MS_test.RData")
### For dara eachmovie
Movie_data <- function(tr_data,test_data){
movie_id <- sort(unique(tr_data$Movie))
user_id <- sort(unique(tr_data$User))
Movie_mat <- matrix(NA, nrow = length(user_id), ncol = length(movie_id))
rownames(Movie_mat) <- user_id
colnames(Movie_mat) <- movie_id
test_mat <- Movie_mat
for(i in 1:length(movie_id)){
col.name <- movie_id[i]
index <- which(tr_data$Movie == col.name)
scores <- tr_data[index, 4] #Score
users <- tr_data[index, 3]  #User
index2 <- which(user_id %in% users)
Movie_mat[index2, i] = scores
Movie_mat[!index2, i] = NA
}
for(i in 1:length(movie_id)){
col.name <- movie_id[i]
index <- which(test_data$Movie == col.name)
scores <- test_data[index, 4] #Score
users <- test_data[index, 3]  #User
index2 <- which(user_id %in% users)
test_mat[index2, i] = scores
test_mat[!index2, i] = NA
}
return(list(train=Movie_mat,test=test_mat))
}
all_data <- Movie_data(Movietrain,Movietest)
Movie_train <- all_data$train
Movie_test  <- all_data$test
save(Movie_train, file = "../output/data/Movie_train.RData")
save(Movie_test, file = "../output/data/Movie_test.RData")
setwd("~/Documents/GitHub/Spring2018-Project4-grp9/output")
save(Movie_train, file = "../output/data/Movie_train.RData")
save(Movie_test, file = "../output/data/Movie_test.RData")
save(Movie_train, file = "../output/data/Movie_train.RData")
save(Movie_test, file = "../output/data/Movie_test.RData")
save(MS_train, file = "../output/data/MS_train.RData")
save(MS_test, file = "../output/data/MS_test.RData")
